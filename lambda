/**
 * This sample demonstrates a simple skill built with the Amazon Alexa Skills Kit.
 * The Intent Schema, Custom Slots, and Sample Utterances for this skill, as well as
 * testing instructions are located at http://amzn.to/1LzFrj6
 *
 * For additional samples, visit the Alexa Skills Kit Getting Started guide at
 * http://amzn.to/1LGWsLG
 */

// Route the incoming request based on type (LaunchRequest, IntentRequest,
// etc.) The JSON body of the request is provided in the event parameter.

var AWS = require("aws-sdk");
AWS.config.region = 'us-east-1';


exports.handler = function (event, context) {
    try {
        console.log("event.session.application.applicationId=" + event.session.application.applicationId);

        /**
         * Uncomment this if statement and populate with your skill's application ID to
         * prevent someone else from configuring a skill that sends requests to this function.
         */
        /*
        if (event.session.application.applicationId !== "amzn1.echo-sdk-ams.app.[unique-value-here]") {
             context.fail("Invalid Application ID");
        }
        */

        if (event.session.new) {
            onSessionStarted({requestId: event.request.requestId}, event.session);
        }

        if (event.request.type === "LaunchRequest") {
            onLaunch(event.request,
                event.session,
                function callback(sessionAttributes, speechletResponse) {
                    context.succeed(buildResponse(sessionAttributes, speechletResponse));
                });
        } else if (event.request.type === "IntentRequest") {
            onIntent(event.request,
                event.session,
                function callback(sessionAttributes, speechletResponse) {
                    context.succeed(buildResponse(sessionAttributes, speechletResponse));
                });
        } else if (event.request.type === "SessionEndedRequest") {
            onSessionEnded(event.request, event.session);
            context.succeed();
        }
    } catch (e) {
        context.fail("Exception: " + e);
    }
};

/**
 * Called when the session starts.
 */
function onSessionStarted(sessionStartedRequest, session) {
    console.log("onSessionStarted requestId=" + sessionStartedRequest.requestId +
        ", sessionId=" + session.sessionId);
}

/**
 * Called when the user launches the skill without specifying what they want.
 */
function onLaunch(launchRequest, session, callback) {
    console.log("onLaunch requestId=" + launchRequest.requestId +
        ", sessionId=" + session.sessionId);

    // Dispatch to your skill's launch.
   // getSQSMessage(callback);
   getWelcome(callback);
}

/**
 * Called when the user specifies an intent for this skill.
 */
function onIntent(intentRequest, session, callback) {
    console.log("onIntent requestId=" + intentRequest.requestId +
        ", sessionId=" + session.sessionId);

    var intent = intentRequest.intent,
        intentName = intentRequest.intent.name;

    // Dispatch to your skill's intent handlers
    if ("MyColorIsIntent" === intentName) {
        setSQSMessage(intent, session, callback);
    } else if ("MoveForwardIntent" === intentName) {
        moveForward(intent, session, callback);
    } else if ("MoveBackwardIntent" === intentName) {
        moveBackward(intent, session, callback);
    } else if ("GrabIntent" === intentName) {
        grabItem(intent, session, callback);
    } else if ("ThrowIntent" === intentName) {
        throwItem(intent, session, callback);
    } else if ("AttackIntent" === intentName) {
        attack(intent, session, callback);
    } else if ("AMAZON.HelpIntent" === intentName) {
        getWelcomeResponse(callback);
    } else if ("AMAZON.StopIntent" === intentName || "AMAZON.CancelIntent" === intentName) {
        handleSessionEndRequest(callback);
    } else {
        throw "Invalid intent";
    }
}

function attack(intent, session, callback) {
    var cardTitle = intent.name;
    var repromptText = " ";
    var sessionAttributes = {};
    var shouldEndSession = false;
    var speechOutput = " ";
    
    var responses = ["Float like a butterfly. Sting like a bee",
        "How you like me now?", "How you like them apples?",
        "Charge!", "Pyew Pyew", "Careful with that thing",
        "Say hello to my little friend", "Judo Chop"
    ];
    console.log(responses.length);

    speechOutput = responses[Math.floor(Math.random() * responses.length)];
    console.log(speechOutput);
    repromptText = " ";
    
    var qurl = 'https://sqs.us-east-1.amazonaws.com/742947975125/DragonQueue';
    var queue = new AWS.SQS({params: {QueueUrl: qurl.toString()}});
    var params = {
        MessageBody: "attack"
    };
    
    queue.sendMessage(params, function (err, data)
    {
        if (err) console.log(err, err.stack);
        else 
        {
            console.log("message Sent");
            var shouldEndSession = false;
            //callback goes here
            callback(sessionAttributes,
            buildSpeechletResponse(cardTitle, speechOutput, repromptText, shouldEndSession));
        }
    });
}

function throwItem(intent, session, callback) {
    var cardTitle = intent.name;
    var repromptText = " ";
    var sessionAttributes = {};
    var shouldEndSession = false;
    var speechOutput = " ";
    
    var responses = ["Take that!", "You didn't need it anyway", "Go baby go!",
        "I made him an offer he couldn't refuse", "It's out of my hands",
        "That was getting heavy", "Come back!", "Littering is bad", "That was still good",
        "You're better off", "Bye bye!", "Thank you! Come again!", "Going. Going. Gone!",
        "Back demon!", "It was bound to happen", "Really?", "Do you feel better now?",
        "Just had to get that off your chest"
    ];
    console.log(responses.length);

    speechOutput = responses[Math.floor(Math.random() * responses.length)];
    console.log(speechOutput);
    repromptText = " ";
    
    var qurl = 'https://sqs.us-east-1.amazonaws.com/742947975125/DragonQueue';
    var queue = new AWS.SQS({params: {QueueUrl: qurl.toString()}});
    var params = {
        MessageBody: "throw"
    };
    
    queue.sendMessage(params, function (err, data)
    {
        if (err) console.log(err, err.stack);
        else 
        {
            console.log("message Sent");
            var shouldEndSession = false;
            //callback goes here
            callback(sessionAttributes,
            buildSpeechletResponse(cardTitle, speechOutput, repromptText, shouldEndSession));
        }
    });
}


function grabItem(intent, session, callback) {
    var cardTitle = intent.name;
    var repromptText = " ";
    var sessionAttributes = {};
    var shouldEndSession = false;
    var speechOutput = " ";
    
    var responses = ["Ooh its shiny!", "My precious!", "It's your lucky day",
        "One persons trash is another persons treasure", "Its okay. No one saw you!",
        "Five second rule!", "I knew you'd like it.", "Finders Keepers", "Mine!",
        "Who would leave this here?", "I wonder what this is for", "You gonna share that?",
        "Possession is nine tenths of the law"
    ];
    console.log(responses.length);

    speechOutput = responses[Math.floor(Math.random() * responses.length)];
    console.log(speechOutput);
    repromptText = " ";
    
    var qurl = 'https://sqs.us-east-1.amazonaws.com/742947975125/DragonQueue';
    var queue = new AWS.SQS({params: {QueueUrl: qurl.toString()}});
    var params = {
        MessageBody: "grab"
    };
    
    queue.sendMessage(params, function (err, data)
    {
        if (err) console.log(err, err.stack);
        else 
        {
            console.log("message Sent");
            var shouldEndSession = false;
            //callback goes here
            callback(sessionAttributes,
            buildSpeechletResponse(cardTitle, speechOutput, repromptText, shouldEndSession));
        }
    });
}

function moveBackward(intent, session, callback) {
    var cardTitle = intent.name;
    var repromptText = " ";
    var sessionAttributes = {};
    var shouldEndSession = false;
    var speechOutput = " ";

    var responses = ["Let's get out of here", "Back it up!", "BEEP! BEEP! BEEP!",
        "I don't want to go back there", "You're living in the past!",
        "I feel like we've been here before.", "As you wish", "Sigh",
        "If you must", "I liked it there", "Deja Vu"
    ];

    speechOutput = responses[Math.floor(Math.random() * responses.length)];
    console.log(speechOutput);
    repromptText = " ";
    
    var qurl = 'https://sqs.us-east-1.amazonaws.com/742947975125/DragonQueue';
    var queue = new AWS.SQS({params: {QueueUrl: qurl.toString()}});
    var params = {
        MessageBody: "backup"
    };
    
    queue.sendMessage(params, function (err, data)
    {
        if (err) console.log(err, err.stack);
        else 
        {
            console.log("message Sent");
            var shouldEndSession = false;
            //callback goes here
            callback(sessionAttributes,
            buildSpeechletResponse(cardTitle, speechOutput, repromptText, shouldEndSession));
            
        //    wait(2000);
        //    
        //    getSQSMessage(callback);
        }
        
    });
}

function moveForward(intent, session, callback) {
    var cardTitle = intent.name;
    var repromptText = " ";
    var sessionAttributes = {};
    var shouldEndSession = false;
    var speechOutput = " ";

    var responses = ["Onward!", "Up Up and Away!", "This is fun!", 
        "I wonder what the next room will be like", "Walk Hard... Hard!",
        "We're going places!", "That's the ticket!", "There be dragons here",
        "One foot in front of the other", "I like your style", "After you",
        "If you insist", "A man a plan a canal panama", "Are we there yet?",
        "Keep on Truckin", "Keep on keepin on"
    ];

    speechOutput = responses[Math.floor(Math.random() * responses.length)];
    console.log(speechOutput);
    repromptText = " ";
    
    var qurl = 'https://sqs.us-east-1.amazonaws.com/742947975125/DragonQueue';
    var queue = new AWS.SQS({params: {QueueUrl: qurl.toString()}});
    var params = {
        MessageBody: "forward"
    }
    
    queue.sendMessage(params, function (err, data)
    {
        if (err) console.log(err, err.stack);
        else 
        {
            console.log("message Sent");
            var shouldEndSession = false;
            //callback goes here
            callback(sessionAttributes,
            buildSpeechletResponse(cardTitle, speechOutput, repromptText, shouldEndSession));
        }
        
    });
}

/**
 * Called when the user ends the session.
 * Is not called when the skill returns shouldEndSession=true.
 */
function onSessionEnded(sessionEndedRequest, session) {
    console.log("onSessionEnded requestId=" + sessionEndedRequest.requestId +
        ", sessionId=" + session.sessionId);
    // Add cleanup logic here
}

function handleSessionEndRequest(callback) {
    var cardTitle = "Session Ended";
    var speechOutput = "";
    // Setting this to true ends the session and exits the skill.
    var shouldEndSession = true;

    callback({}, buildSpeechletResponse(cardTitle, speechOutput, null, shouldEndSession));
}

// --------------- Functions that control the skill's behavior -----------------------


function getWelcome(callback) {
    // If we wanted to initialize the session to have some attributes we could add those here.
    var sessionAttributes = {};
    var cardTitle = "Welcome";
    var speechOutput = "Welcome to Double....Double....Dragons! "
        + "In this game we will be on the hunt for dragoons. "
        + "To move to another room, first look at the door "
        + "that you want to walk through, then wait for it to turn green. "
        + "Once it is in focus use the phrase: Alexa, tell Double Double Dragons "
        + "to walk through the door."
        + " To pick things up or open chests, first focus on the item and use the "
        + " phrase: Alexa tell Double Double Dragons to pick that up."
        + " To slay dragons, use the phrase: Alexa tell Double Double Dragons to "
        + " judo chop. Have fun exploring!";
        
    // If the user either does not reply to the welcome message or says something that is not
    // understood, they will be prompted again with this text.
    var repromptText = "You can move around you can pick up stuff. ";
    var shouldEndSession = false;
    
    callback(sessionAttributes,
    buildSpeechletResponse(cardTitle, speechOutput, repromptText, shouldEndSession));
}

function getWelcomeResponse(callback) {
    // If we wanted to initialize the session to have some attributes we could add those here.
    var sessionAttributes = {};
    var cardTitle = "Welcome";
    var speechOutput = "Hi, Welcome to the unity integration example";
    // If the user either does not reply to the welcome message or says something that is not
    // understood, they will be prompted again with this text.
    var repromptText = "Please tell me your favorite color by saying, " +
        "my favorite color is red";
    var shouldEndSession = false;
}

function getSQSMessage(callback) {
    // If we wanted to initialize the session to have some attributes we could add those here.
    
    var sessionAttributes = {};
    var cardTitle = "Welcome";
    var speechOutput = "we haven't read SQS yet";
    var repromptText = " ";
    var shouldEndSession = false;
    //SQS here
    
    var qurl = 'https://sqs.us-east-1.amazonaws.com/742947975125/AlexaQueue' 
        + '/?Action=GetQueueAttributes'
        + '&AttributeName.1=ALL';
    var queue = new AWS.SQS({params: {QueueUrl: qurl.toString()}});
 
    params = {};
    console.log("queue ready");
    
    queue.receiveMessage(params, function (err, data){
        if (err) {
            console.log(err, err.stack)
            console.log("read error")
            callback(sessionAttributes,
            buildSpeechletResponse(cardTitle, speechOutput, repromptText, shouldEndSession));
        } else if (typeof data.Messages != 'undefined') {
            //console.log(data.Messages);
            console.log("message Received");
            
            var speechOutput = "";
            
            console.log(data.Messages.length);
            console.log(data.Messages[0]);
                
            var str = data.Messages[0].Body;
            
            console.log(str);

            speechOutput = str;
            
            //delete message
                    
            var params = {
			  QueueUrl:  qurl.toString(), /* required */
			  ReceiptHandle: data.Messages[0].ReceiptHandle /* required */
			};
			
			queue.deleteMessage(params, function(err, data) {
			  if (err) 
			  { 
			      console.log(err, err.stack); // an error occurred
			      console.log("error deleting");
			    callback(sessionAttributes,
                buildSpeechletResponse(cardTitle, speechOutput, repromptText, shouldEndSession));
			  } else {
			  console.log(data);     
			    console.log("deleted"); 
                callback(sessionAttributes,
                buildSpeechletResponse(cardTitle, speechOutput, repromptText, shouldEndSession));
			  }    
			});
        } else {
            callback(sessionAttributes,
            buildSpeechletResponse(cardTitle, speechOutput, repromptText, shouldEndSession));
        }
    });
}

function setSQSMessage(intent, session, callback) {
    var cardTitle = intent.name;
    var favoriteColorSlot = intent.slots.Color;
    var repromptText = " ";
    var sessionAttributes = {};
    var shouldEndSession = false;
    var speechOutput = " ";

    if (favoriteColorSlot) {
        var favoriteColor = favoriteColorSlot.value;
        sessionAttributes = createFavoriteColorAttributes(favoriteColor);
        speechOutput = "I now know your favorite color is " + favoriteColor + ". You can ask me " +
            "your favorite color by saying, what's my favorite color?";
        repromptText = "You can ask me your favorite color by saying, what's my favorite color?";
        
        var qurl = 'https://sqs.us-east-1.amazonaws.com/742947975125/DragonQueue';
        var queue = new AWS.SQS({params: {QueueUrl: qurl.toString()}});
        var params = {
            MessageBody: "message is " + favoriteColor
        }
        
        queue.sendMessage(params, function (err, data){
            if (err) console.log(err, err.stack);
            else {
                console.log("message Sent");
                //callback goes here
         callback(sessionAttributes,
         buildSpeechletResponse(cardTitle, speechOutput, repromptText, shouldEndSession));
            }
            
        })
    } else {
        speechOutput = "I'm not sure what your favorite color is. Please try again";
        repromptText = "I'm not sure what your favorite color is. You can tell me your " +
            "favorite color by saying, my favorite color is red";
            
        //made callback hell here
         callback(sessionAttributes,
         buildSpeechletResponse(cardTitle, speechOutput, repromptText, shouldEndSession));
    }
}

/**
 * Sets the color in the session and prepares the speech to reply to the user.
 */
function setColorInSession(intent, session, callback) {
    var cardTitle = intent.name;
    var favoriteColorSlot = intent.slots.Color;
    var repromptText = " ";
    var sessionAttributes = {};
    var shouldEndSession = false;
    var speechOutput = " ";

    if (favoriteColorSlot) {
        var favoriteColor = favoriteColorSlot.value;
        sessionAttributes = createFavoriteColorAttributes(favoriteColor);
        speechOutput = "I now know your favorite color is " + favoriteColor + ". You can ask me " +
            "your favorite color by saying, what's my favorite color?";
        repromptText = "You can ask me your favorite color by saying, what's my favorite color?";
    
    } else {
        speechOutput = "I'm not sure what your favorite color is. Please try again";
        repromptText = "I'm not sure what your favorite color is. You can tell me your " +
            "favorite color by saying, my favorite color is red";
            
        //made callback hell here
         callback(sessionAttributes,
         buildSpeechletResponse(cardTitle, speechOutput, repromptText, shouldEndSession));
    }

    //this is where the callbcak should be rewrite with asnyc
    // callback(sessionAttributes,
   //         buildSpeechletResponse(cardTitle, speechOutput, repromptText, shouldEndSession));
}

function createFavoriteColorAttributes(favoriteColor) {
    return {
        favoriteColor: favoriteColor
    };
}

function getColorFromSession(intent, session, callback) {
    var favoriteColor;
    var repromptText = null;
    var sessionAttributes = {};
    var shouldEndSession = false;
    var speechOutput = "";

    if (session.attributes) {
        favoriteColor = session.attributes.favoriteColor;
    }

    if (favoriteColor) {
        speechOutput = "Your favorite color is " + favoriteColor + ". Goodbye. oh, and by the way, You have nice hair today.";
        shouldEndSession = true;
    } else {
        speechOutput = "I'm not sure what your favorite color is, you can say, my favorite color " +
            " is red";
    }

    // Setting repromptText to null signifies that we do not want to reprompt the user.
    // If the user does not respond or says something that is not understood, the session
    // will end.
    callback(sessionAttributes,
         buildSpeechletResponse(intent.name, speechOutput, repromptText, shouldEndSession));
}

// --------------- Helpers that build all of the responses -----------------------

function buildSpeechletResponse(title, output, repromptText, shouldEndSession) {
    return {
        outputSpeech: {
            type: "PlainText",
            text: output
        },
        card: {
            type: "Simple",
            title: "SessionSpeechlet - " + title,
            content: "SessionSpeechlet - " + output
        },
        reprompt: {
            outputSpeech: {
                type: "PlainText",
                text: repromptText
            }
        },
        shouldEndSession: shouldEndSession
    };
}

function buildResponse(sessionAttributes, speechletResponse) {
    return {
        version: "1.0",
        sessionAttributes: sessionAttributes,
        response: speechletResponse
    };
}
